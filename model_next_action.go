/*
 * Juspay Router - API Documentation
 *
 * ## Get started Juspay Router provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes</a>. You can consume the APIs directly using your favorite HTTP/REST library. We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. ### Base URLs Use the following base URLs when making requests to the APIs:    | Environment   |      Base URL                                        |   |---------------|------------------------------------------------------|   | Sandbox       | <https://sandbox.hyperswitch.io>                   |   | Production    | <https://router.juspay.io>                           |  # Authentication When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key). You may authenticate all API requests with Juspay server by providing the appropriate key in the request Authorization header. Never share your secret api keys. Keep them guarded and secure. 
 *
 * API version: 0.2
 * Contact: support@juspay.in
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// States the next action to complete the payment
type NextAction struct {
	// The URL to which the customer needs to be redirected for completing the payment.
	RedirectToUrl string `json:"redirect_to_url,omitempty"`
	// The QR code data to be displayed to the customer.
	DisplayQrCode string `json:"display_qr_code,omitempty"`
	// Contains the data for invoking the sdk client for completing the payment.
	InvokePaymentApp *interface{} `json:"invoke_payment_app,omitempty"`
	// Contains the data for invoking the sdk client for completing the payment.
	InvokeSdkClient *interface{} `json:"invoke_sdk_client,omitempty"`
	// Provides the instructions on the next API to be triggered to complete the payment. This is applicable in cases wherein the merchant has to display a UI to the user for collecting information such as OTP, 2factor authentication details.
	TriggerApi *interface{} `json:"trigger_api,omitempty"`
}
